/*
 * Copyright 1991-1998 by Open Software Foundation, Inc. 
 *              All Rights Reserved 
 *  
 * Permission to use, copy, modify, and distribute this software and 
 * its documentation for any purpose and without fee is hereby granted, 
 * provided that the above copyright notice appears in all copies and 
 * that both the copyright notice and this permission notice appear in 
 * supporting documentation. 
 *  
 * OSF DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE 
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE. 
 *  
 * IN NO EVENT SHALL OSF BE LIABLE FOR ANY SPECIAL, INDIRECT, OR 
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT, 
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION 
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
 */
/*
 * MkLinux
 */
/* CMU_HIST */
/*
 * Revision 2.9  91/08/28  11:15:19  jsb
 * 	Added conditionalized sequence number support.
 * 	[91/08/13            rpd]
 * 	Fixed memory_object_supply_completed and memory_object_data_return
 * 	to use mach_port_t as the C type name for port arguments.
 * 	[91/08/02            rpd]
 * 	Update types in new memory object routines.  Add
 * 	memory_object_change_completed.
 * 	[91/07/03  14:05:39  dlb]
 * 
 * Revision 2.8  91/07/01  08:25:16  jsb
 * 	From David Black at OSF: added memory_object_supply_completed
 * 	and memory_object_data_return.
 * 	[91/06/29  14:54:47  jsb]
 * 
 * Revision 2.7  91/06/25  10:30:30  rpd
 * 	Changed the port-based type declarations
 * 	to use mach_port_t as the C type name.
 * 	[91/05/23            rpd]
 * 
 * Revision 2.6  91/06/17  15:47:26  jsb
 * 	If KERNEL and NORMA_VM, then use a userprefix (to allow interposition).
 * 	[91/06/17  10:55:06  jsb]
 * 
 * Revision 2.5  91/05/14  16:55:36  mrt
 * 	Correcting copyright
 * 
 * Revision 2.4  91/02/05  17:33:53  mrt
 * 	Changed to new Mach copyright
 * 	[91/02/01  17:19:02  mrt]
 * 
 * Revision 2.3  90/08/06  17:06:11  rpd
 * 	For compatibility with Mach 2.5, added dealloc to
 * 	arguments of memory_object_terminate and memory_object_copy.
 * 	[90/08/04            rpd]
 * 
 * Revision 2.2  90/06/02  14:58:51  rpd
 * 	Changed memory_object argument to memory_object_lock_completed
 * 	to default to a send-once right but still allow send rights.
 * 	[90/05/31            rpd]
 * 
 * 	Converted to new IPC.
 * 	[90/03/26  22:35:02  rpd]
 * 
 * Revision 2.1  89/08/03  17:18:02  rwd
 * Created.
 * 
 * Revision 2.3  89/02/25  18:38:17  gm0w
 * 	Changes for cleanup.
 * 
 * Revision 2.2  89/01/15  16:31:06  rpd
 * 	Moved from kern/ to mach/.
 * 	[89/01/15  14:40:04  rpd]
 * 
 * Revision 2.6  89/01/12  07:58:12  rpd
 * 	Fixed includes.
 * 	[89/01/12  04:52:21  rpd]
 * 
 * Revision 2.5  88/12/19  02:46:15  mwyoung
 * 	Change argument to memory_object_init to avoid lint in the MiG
 * 	output.
 * 	[88/12/18            mwyoung]
 * 	
 * 	Add memory_object_copy.
 * 	[88/11/07            mwyoung]
 * 
 * Revision 2.4  88/08/25  18:16:54  mwyoung
 * 	Add memory_object_terminate.
 * 	[88/08/11  18:46:46  mwyoung]
 * 
 * 29-Jun-88  Michael Young (mwyoung) at Carnegie-Mellon University
 *	Use new types.
 *
 * 29-Jun-88  Michael Young (mwyoung) at Carnegie-Mellon University
 *	Moved data type declarations to "mach_types.defs".
 *
 *  9-Dec-87  Michael Young (mwyoung) at Carnegie-Mellon University
 *	Split that part of the interface applicable only to default
 *	pagers into a separate interface definition.
 *
 *	Documented the interface.
 *	
 *	Purged history.  Contributors so far: jle, mwyoung, bolosky.
 *
 */
/* CMU_ENDHIST */
/* 
 * Mach Operating System
 * Copyright (c) 1991,1990,1989,1988,1987 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
 */
/*
 * File:	mach/memory_object.defs
 *
 * Abstract:
 *	Basic Mach external memory management interface declaration.
 */

subsystem
#if	KERNEL_USER
	  KernelUser
#endif	KERNEL_USER
#if	KERNEL_SERVER
	  KernelServer
#endif	KERNEL_SERVER
		     memory_object 2200;

#ifdef	MACH_KERNEL
#include <norma_vm.h>
#include <advisory_pageout.h>
#if	NORMA_VM
userprefix k_;
#endif	NORMA_VM
#endif	/* MACH_KERNEL */

#include <mach/std_types.defs>
#include <mach/mach_types.defs>

#if	SEQNOS
serverprefix seqnos_;
serverdemux seqnos_memory_object_server;
#endif	SEQNOS

/*
 *	Initialize the specified memory object, providing
 *	a reqeust port on which control calls can be made.
 *	[To allow the mapping of this object to be used, the
 *	memory manager must call memory_object_set_attributes,
 *	specifying the "ready" parameter as TRUE.  To reject
 *	all mappings of this object, the memory manager may
 *	use memory_object_destroy.]
 */
simpleroutine	memory_object_init(
		memory_object		: memory_object_t;
#if	SEQNOS
	msgseqno seqno			: mach_port_seqno_t;
#endif	SEQNOS
		memory_control		: memory_object_control_t =
						MACH_MSG_TYPE_MAKE_SEND
						ctype: mach_port_t;
		memory_object_page_size	: vm_size_t);


/*
 *	Indicates that the specified memory object is no longer
 *	mapped (or cached -- see memory_object_set_attributes),
 *	and that further mappings will cause another memory_object_init
 *	call to be made.  No further calls will be made on
 *	the memory object by this kernel.
 *
 *	[All rights to the control and name ports are included
 *	in this call.  The memory manager should use port_deallocate
 *	to release them once they are no longer needed.]
 */
simpleroutine	memory_object_terminate(
		memory_object		: memory_object_t =
						MACH_MSG_TYPE_MOVE_SEND
						ctype: mach_port_t;
#if	SEQNOS
	msgseqno seqno			: mach_port_seqno_t;
#endif	SEQNOS
		memory_control		: memory_object_control_t =
						MACH_MSG_TYPE_MOVE_RECEIVE
						ctype: mach_port_t);

skip;	/* was memory_object_copy */

/*
 *	Request data from this memory object.  At least
 *	the specified data should be returned with at
 *	least the specified access permitted.
 *
 *	[Reply should be memory_object_data_provided.]
 */
simpleroutine	memory_object_data_request(
		memory_object		: memory_object_t;
#if	SEQNOS
	msgseqno seqno			: mach_port_seqno_t;
#endif	SEQNOS
		memory_control		: memory_object_control_t =
						MACH_MSG_TYPE_MAKE_SEND
						ctype: mach_port_t;
		offset			: vm_offset_t;
		length			: vm_size_t;
		desired_access		: vm_prot_t);

/*
 *	Request that the specified portion of this
 *	memory object be unlocked to allow the specified
 *	forms of access; the kernel already has the data.
 *
 *	[Reply should be memory_object_lock_request.]
 */
simpleroutine	memory_object_data_unlock(
		memory_object		: memory_object_t;
#if	SEQNOS
	msgseqno seqno			: mach_port_seqno_t;
#endif	SEQNOS
		memory_control		: memory_object_control_t =
						MACH_MSG_TYPE_MAKE_SEND
						ctype: mach_port_t;
		offset			: vm_offset_t;
		length			: vm_size_t;
		desired_access		: vm_prot_t);

skip;	/* was memory_object_data_write */

/*
 *	Indicate that a previous memory_object_lock_reqeust has been
 *	completed.  Note that this call is made on whatever
 *	port is specified in the memory_object_lock_request; that port
 *	need not be the memory object port itself.
 *
 *	[No reply expected.]
 */
simpleroutine	memory_object_lock_completed(
		memory_object		: memory_object_t =
			polymorphic|MACH_MSG_TYPE_PORT_SEND_ONCE
			ctype: mach_port_t;
#if	SEQNOS
	msgseqno seqno			: mach_port_seqno_t;
#endif	SEQNOS
		memory_control		: memory_object_control_t =
						MACH_MSG_TYPE_MAKE_SEND
						ctype: mach_port_t;
		offset			: vm_offset_t;
		length			: vm_size_t);

/*
 *	Indicate that a previous memory_object_data_supply has been
 *	completed.  Note that this call is made on whatever
 *	port is specified in the memory_object_data_supply; that port
 *	need not be the memory object port itself.
 *
 *	The result parameter indicates what happened during the supply.
 *	If it is not KERN_SUCCESS, then error_offset identifies the
 *	first offset at which a problem occurred.  The pagein operation
 *	stopped at this point.  Note that the only failures reported
 *	by this mechanism are KERN_MEMORY_PRESENT.  All other failures
 *	(invalid argument, error on pagein of supplied data in manager's
 *	address space) cause the entire operation to fail.
 *
 *	XXX Check what actually happens in latter case!
 *
 *	[No reply expected.]
 */
simpleroutine	memory_object_supply_completed(
		memory_object		: memory_object_t =
			polymorphic|MACH_MSG_TYPE_PORT_SEND_ONCE
			ctype: mach_port_t;
#if	SEQNOS
	msgseqno seqno			: mach_port_seqno_t;
#endif	SEQNOS
		memory_control		: memory_object_control_t =
						MACH_MSG_TYPE_MAKE_SEND
						ctype: mach_port_t;
		offset		 	: vm_offset_t;
		length		 	: vm_size_t;
		result		 	: kern_return_t;
		error_offset	 	: vm_offset_t);

/*
 *	Return data to manager.  This call is used in place of data_write
 *	for objects initialized by object_ready instead of set_attributes.
 *	This call indicates whether the returned data is dirty and whether
 *	the kernel kept a copy.  Precious data remains precious if the
 *	kernel keeps a copy.  The indication that the kernel kept a copy
 *	is only a hint if the data is not precious; the cleaned copy may
 *	be discarded without further notifying the manager.
 *
 *	[Reply should be vm_deallocate to release the data.]
 */
simpleroutine   memory_object_data_return(
		memory_object		: memory_object_t;
#if	SEQNOS
	msgseqno seqno			: mach_port_seqno_t;
#endif	SEQNOS
		memory_control		: memory_object_control_t =
						MACH_MSG_TYPE_MAKE_SEND
						ctype: mach_port_t;
		offset		 	: vm_offset_t;
		data		 	: pointer_t;
		dirty			: boolean_t;
		kernel_copy		: boolean_t);

skip;	/* was nmk15_memory_object_change_completed */

simpleroutine memory_object_synchronize(
		memory_object           : memory_object_t;
#if	SEQNOS
	msgseqno seqno                  : mach_port_seqno_t;
#endif	SEQNOS
		memory_control          : memory_object_control_t =
					  MACH_MSG_TYPE_MAKE_SEND
					  ctype: mach_port_t;
			offset          : vm_offset_t;
			length          : vm_offset_t;
			sync_flags      : vm_sync_t );


skip;	/* was memory_object_notify */

skip;	/* was memory_object_rejected */

/*
 *	Confirm a successful memory_object_change attributes message.
 */
simpleroutine   memory_object_change_completed(
                memory_object           : memory_object_t =
                        	polymorphic|MACH_MSG_TYPE_PORT_SEND_ONCE
                        	ctype: mach_port_t;
#if     SEQNOS
        msgseqno seqno                  : mach_port_seqno_t;
#endif  SEQNOS
                memory_control          : memory_object_control_t =
                                MACH_MSG_TYPE_MAKE_SEND
                                ctype: mach_port_t;
                flavor               	: memory_object_flavor_t);


#if	!defined(ADVISORY_PAGEOUT) || ADVISORY_PAGEOUT

/*
 *	Advisory pageout
 *	Inform pager that the kernel would like to discard the given 
 *	page.
 *	The pager should then clean/flush this page via the lock_request
 *	mechanism.
 *	If the pager does not cooperate, the kernel then uses mandatory
 *	(regular) pageout on this page.
 *
 */
simpleroutine   memory_object_discard_request(
		memory_object		: memory_object_t;
#if	SEQNOS
	msgseqno seqno			: mach_port_seqno_t;
#endif	SEQNOS
		memory_control		: memory_object_control_t =
						MACH_MSG_TYPE_MAKE_SEND
						ctype: mach_port_t;
		offset		 	: vm_offset_t;
		length			: vm_size_t);

#else	/* !defined(ADVISORY_PAGEOUT) || ADVISORY_PAGEOUT */
skip;
#endif	/* !defined(ADVISORY_PAGEOUT) || ADVISORY_PAGEOUT */
