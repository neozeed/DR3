/*
 * Copyright 1991-1998 by Open Software Foundation, Inc. 
 *              All Rights Reserved 
 *  
 * Permission to use, copy, modify, and distribute this software and 
 * its documentation for any purpose and without fee is hereby granted, 
 * provided that the above copyright notice appears in all copies and 
 * that both the copyright notice and this permission notice appear in 
 * supporting documentation. 
 *  
 * OSF DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE 
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE. 
 *  
 * IN NO EVENT SHALL OSF BE LIABLE FOR ANY SPECIAL, INDIRECT, OR 
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT, 
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION 
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
 */
/*
 * MkLinux
 */
/* CMU_HIST */
/*
 * Revision 2.3.3.5  92/06/24  18:03:04  jeffreyh
 * 	Add release flag to supply_completed.  Delete xmm_pager args from
 * 	all _completed routines.
 * 	[92/06/24            dlb]
 * 
 * 	Add release and xmm pager parameters to proxy_lock_completed.
 * 	[92/06/09            dlb]
 * 
 * 	use_old_pageout --> use_routine
 * 	[92/06/04            dlb]
 * 
 * Revision 2.3.3.4  92/03/28  10:13:16  jeffreyh
 * 	Changed data_write to data_write_return and deleted data_return.
 * 	 Added new parameters to support m_o_change_attributes().
 * 	[92/03/20            sjs]
 * 
 * Revision 2.3.3.3  92/02/21  11:27:57  jsb
 * 	Changed proxy_terminate back into a simpleroutine, and changed its
 * 	destination argument from copy_send to move_send.
 * 	[92/02/17  07:18:19  jsb]
 * 
 * 	Changed proxy_init destination from copy_send to move_send.
 * 	[92/02/16  14:12:32  jsb]
 * 
 * 	Renamed {mobj,kobj}_port to xmm_{pager,kernel}.
 * 	Changed proxy_init to use xmm_object instead of
 * 	<memory_object_host, memory_object> pair.
 * 	[92/02/10  17:04:18  jsb]
 * 
 * 	Changed for new memory_object_name protocol.
 * 	[92/02/09  12:56:43  jsb]
 * 
 * Revision 2.3.3.2  92/01/21  22:09:01  jsb
 * 	From dlb@ri.osf.org: make proxy_terminate an rpc.
 * 
 * Revision 2.3.3.1  92/01/21  21:54:39  jsb
 * 	Changed interface to use ports instead of pointers.
 * 	[92/01/20  17:28:21  jsb]
 * 
 * 	Fixes from OSF.
 * 	[92/01/17  14:15:23  jsb]
 * 
 * Revision 2.3.1.1  92/01/15  12:22:11  jeffreyh
 * 	Pass memory_object_name as a receive right in proxy_terminate. (dlb)
 * 
 * Revision 2.3  91/12/10  13:26:30  jsb
 * 	Added missing third parameter to proxy_terminate.
 * 	It should in the future become a moving receive right.
 * 	[91/12/10  12:49:57  jsb]
 * 
 * Revision 2.2  91/06/17  15:48:31  jsb
 * 	First checkin.
 * 	[91/06/17  13:45:41  jsb]
 * 
 */
/* CMU_ENDHIST */
/* 
 * Mach Operating System
 * Copyright (c) 1991,1992 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */
/*
 */
/*
 *	File:	norma/xmm_proxy.defs
 *	Author:	Joseph S. Barrera III
 *	Date:	1991
 *
 *	Mig interface between xmm_export.c and xmm_import.c.
 *	These routines are NOT exported to the user; the user
 *	interface to norma functionality is mach/mach_norma.defs.
 */

subsystem
#if	KERNEL_USER
	  KernelUser
#endif	KERNEL_USER
#if	KERNEL_SERVER
	  KernelServer
#endif	KERNEL_SERVER
		proxy 1200;

serverprefix _;

#include <mach/std_types.defs>
#include <mach/mach_types.defs>

type xmm_reply_data_t = struct[2] of int;
import <xmm/xmm_obj.h>;

/*
 * Calls from kernel to memory manager (adopted from memory_object.defs).
 */

simpleroutine	proxy_init(
		xmm_object		: mach_port_move_send_t;
		xmm_kernel		: mach_port_make_send_t;
		page_size		: vm_size_t;
		internal		: boolean_t;
		size			: vm_size_t);

simpleroutine	proxy_terminate(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t;
		release			: boolean_t);

simpleroutine	proxy_copy(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t);

simpleroutine	proxy_data_request(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t;
		offset			: vm_offset_t;
		length			: vm_size_t;
		desired_access		: vm_prot_t);

simpleroutine	proxy_data_unlock(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t;
		offset			: vm_offset_t;
		length			: vm_size_t;
		desired_access		: vm_prot_t);

simpleroutine	proxy_data_return(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t;
		offset			: vm_offset_t;
		data			: pointer_t;
		dirty			: boolean_t;
		kernel_copy		: boolean_t);

simpleroutine	proxy_lock_completed(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t;
		offset			: vm_offset_t;
		length			: vm_size_t;
		reply			: xmm_reply_data_t);

simpleroutine	proxy_supply_completed(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t;
		offset			: vm_offset_t;
		length			: vm_size_t;
		result			: kern_return_t;
		error_offset		: vm_offset_t;
		reply			: xmm_reply_data_t);

simpleroutine	proxy_change_completed(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t;
		may_cache		: boolean_t;
		copy_strategy		: memory_object_copy_strategy_t;
		reply			: xmm_reply_data_t);

simpleroutine	proxy_synchronize(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t;
		offset       		: vm_offset_t;
		length          	: vm_offset_t;
		sync_flags      	: vm_sync_t );

simpleroutine	proxy_freeze(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t;
		existence_map		: inline_existence_map_t;
		existence_size		: vm_offset_t);

simpleroutine	proxy_share(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t);

simpleroutine	proxy_declare_page(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t;
		offset			: vm_offset_t;
		size			: vm_size_t);

simpleroutine	proxy_declare_pages(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t;
		existence_map		: inline_existence_map_t;
		existence_size		: vm_offset_t;
		frozen			: boolean_t);

simpleroutine	proxy_caching(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t);

simpleroutine	proxy_uncaching(
		xmm_pager		: mach_port_t;
		msgseqno seqno		: mach_port_seqno_t);

/*
 * Calls from memory manager to kernel (adopted from mach.defs).
 */

simpleroutine	proxy_data_unavailable(
		xmm_kernel	: mach_port_t;
		msgseqno seqno	: mach_port_seqno_t;
		offset		: vm_offset_t;
		size		: vm_size_t);

routine		proxy_get_attributes(
		xmm_kernel	: mach_port_t;
		msgseqno seqno	: mach_port_seqno_t;
		flavor		: memory_object_flavor_t;
	out	attributes	: memory_object_info_t, CountInOut);

simpleroutine	proxy_lock_request(
		xmm_kernel	: mach_port_t;
		msgseqno seqno	: mach_port_seqno_t;
		offset		: vm_offset_t;
		size		: vm_size_t;
		should_clean	: boolean_t;
		should_flush	: boolean_t;
		lock_value	: vm_prot_t;
		reply		: xmm_reply_data_t);

simpleroutine	proxy_data_error(
		xmm_kernel	: mach_port_t;
		msgseqno seqno	: mach_port_seqno_t;
		offset		: vm_offset_t;
		size		: vm_size_t;
		error_value	: kern_return_t);

simpleroutine	proxy_set_ready(
		xmm_kernel	: mach_port_t;
		msgseqno seqno	: mach_port_seqno_t;
		xmm_pager	: mach_port_make_send_t;
		may_cache	: boolean_t;
		copy_strategy	: memory_object_copy_strategy_t;
		cluster_size	: vm_size_t;
		error_value	: kern_return_t;
		reply		: xmm_reply_data_t;
		temporary	: boolean_t;
		existence_map	: inline_existence_map_t;
		existence_size	: vm_offset_t);

simpleroutine	proxy_destroy(
		xmm_kernel	: mach_port_t;
		msgseqno seqno	: mach_port_seqno_t;
		reason		: kern_return_t);

simpleroutine	proxy_data_supply(
		xmm_kernel	: mach_port_t;
		msgseqno seqno	: mach_port_seqno_t;
		offset		: vm_offset_t;
		data		: pointer_t;
		lock_value	: vm_prot_t;
		precious	: boolean_t;
		reply		: xmm_reply_data_t);

routine		proxy_create_copy(
		xmm_kernel	: mach_port_t;
		msgseqno seqno	: mach_port_seqno_t;
		new_copy	: mach_port_move_send_t;
	out	result		: kern_return_t);

simpleroutine	proxy_uncaching_permitted(
		xmm_kernel	: mach_port_t;
		msgseqno seqno	: mach_port_seqno_t);

simpleroutine	proxy_synchronize_completed(
		xmm_kernel	: mach_port_t;
		msgseqno seqno	: mach_port_seqno_t;
		offset		: vm_offset_t;
		size		: vm_size_t);

simpleroutine	proxy_release_all(
		xmm_kernel	: mach_port_t;
		msgseqno seqno	: mach_port_seqno_t);
