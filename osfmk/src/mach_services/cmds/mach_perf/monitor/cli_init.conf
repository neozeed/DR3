#
# Copyright 1991-1998 by Open Software Foundation, Inc. 
#              All Rights Reserved 
#  
# Permission to use, copy, modify, and distribute this software and 
# its documentation for any purpose and without fee is hereby granted, 
# provided that the above copyright notice appears in all copies and 
# that both the copyright notice and this permission notice appear in 
# supporting documentation. 
#  
# OSF DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE 
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE. 
#  
# IN NO EVENT SHALL OSF BE LIABLE FOR ANY SPECIAL, INDIRECT, OR 
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
# LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT, 
# NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION 
# WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
#
# MkLinux
#
# OLD HISTORY
# Revision 1.1.4.2  1996/01/25  11:33:07  bernadat
# 	Homogenized copyright headers
# 	[95/11/30            bernadat]
# 
# Revision 1.1.4.1  1995/04/12  12:27:42  madhu
# 	copyright marker not _FREE
# 	[1995/04/11  14:54:43  madhu]
# 
# Revision 1.1.2.5  1995/01/12  08:46:31  madhu
# 	Corrected some information in the comments
# 	[1995/01/12  08:43:26  madhu]
# 
# Revision 1.1.2.4  1995/01/11  10:34:29  madhu
# 	A set of "meaningful" examples included in the configuration file.
# 	[1995/01/11  10:02:27  madhu]
# 
# Revision 1.1.2.3  1994/12/09  15:42:08  madhu
# 	changed header
# 	[1994/12/09  15:40:00  madhu]
# 
# 	changed header
# 	[1994/12/09  15:06:39  madhu]
# 
# Revision 1.1.2.2  1994/12/09  15:17:31  madhu
# 	changed header
# 
# Revision 1.1.2.1  1994/12/09  14:03:17  madhu
# 	changes by Nick for synthetic tests.
# 

# The following are examples that demonstrate what the synthetic tests
# could be used for.
#
# the command syntax is:
# 
# proc <procname>
#   foreground_test arguments
#   background_test arguments
#   background_test arguments
#   ...
# endproc
#
# newlines are used as command separators.
# spaces and tabs count as whitespace and are treated as expected


# cpu intensive jobs. On a MP this should take the same time as 
# an individual test and on a uniprocessor twice the time. 
# explicitly set elapsed times for foreground and background jobs.
proc 2cpujobs
	clock -tn 0 -min 500
	clock -tn 0 -min 600
endproc

# hw -tn 1 does a user mode copy. running several of these simultaneously
# stresses the cache system and the memory bus. On a MP machine that
# uses a write thru' cache, we can see a dramatic increases in the 
# time per op.
#
# we first run hw -tn 1 with cpu intensive jobs and then with other
# memory copies.
#
proc memcopy_cpu
	hw -tn 1
	hw -tn 0
	hw -tn 0
	hw -tn 0
endproc

proc memcopy_multiple
	hw -tn 1
	hw -tn 1
	hw -tn 1
	hw -tn 1
endproc

# exc -tn 0 does a null_trap - a system call that does nothing.
# we do not expect to see any interference between two null
# traps ie. time for 2nulltraps <= time taken for nulltrap_cpu.
proc nulltrap_cpu
	exc -tn 0 
	clock -tn 0 
endproc

proc 2nulltraps
	exc -tn 0 
	exc -tn 0
endproc

# The following is an attempt to create some "synthetic simulations"
# of the AIM benchmark. I have essentially taken some of the most
# common operations during the bench and tried to create some scenarios
# to measure "interference" between these. 

# catch_expection_raise_state against vm_deallocate
# as usual first against a cpu job
proc cer_cpu
	exc -tn 13
	hw -tn 0 
endproc

proc cer_vmd
	exc -tn 13 
	vm -tn 12 
endproc

# now do it in reverse order
proc vmd_cpu
	vm -tn 12 
	hw -tn 0 
endproc

proc vmd_cer
	vm -tn 12 
	exc -tn 13 
endproc

# catch_expection_raise_state against null_rpc
proc cer_nullrpc
	exc -tn 13 
	ipc -tn 1 
endproc
# reverse
proc nullrpc_cer
	ipc -tn 1 
	exc -tn 13 
endproc

# catch_expection_raise_state against 128 bytes inline rpc
proc cer_rpc
	exc -tn 13 
	ipc -tn 7 
endproc
# reverse
proc rpc_cer
	ipc -tn 7 
	exc -tn 13 
endproc

# vm and ipc combinations

# vm_map against 1024 bytes ool rpc
proc vmm_oolrpc
	vm -tn 14 
	ipc -tn 9 
endproc

# vm_map against 1024 bytes inline rpc
proc vmm_inrpc
	vm -tn 14 
	ipc -tn 8 
endproc

# 1024 bytes ool rpc against vm_deallocate
proc oolrpc_vmd
	ipc -tn 9 
	vm -tn 12 -mem 30 # use 30% of free memory
endproc

# 1024 bytes inline rpc against vm_deallocate
proc inrpc_vmd
	ipc -tn 8 
	vm -tn 12 -mem 30 # use 30% of free memory
endproc


# This pager test times a page_fault supplied by an EMM. If we 
# run this in parallel with a cpu bound job on a uniprocessor, the 
# latter will run twice for each page fault during the test. 
proc pgread_cpu
	pager -tn 6
	hw -tn 0
endproc
